apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.name }}-bkp
  namespace: {{ .Values.namespace }}
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::997925851768:role/{{ .Values.localStackName }}-{{ .Values.name }}-vault-bkp-role
automountServiceAccountToken: true
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-backup
  namespace: {{ .Values.name }}-vault
spec:
  schedule: "*/15 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        spec:
          serviceAccountName: {{ .Values.name }}-bkp
          volumes:
            - name: tls
              secret:
                secretName: {{ .Values.name }}-vault-tls
            - name: {{ .Values.name }}-vault
              emptyDir: {}
          initContainers:
            - name: vault-snapshot-init
              image: hashicorp/vault:1.15.2
              env:
                - name: VAULT_ADDR
                  value: "https://{{ .Values.name }}-vault-active.{{ .Values.name }}-vault.svc.cluster.local:8200"
                - name: VAULT_CAPATH
                  value: "/vault/tls/ca.crt"
                - name: BACKUP_ROLE
                  value: "vault_backup"
                - name: VAULT_NAMESPACE
                  value: "{{ .Values.name }}-vault"
              command: [ "/bin/sh", "-c" ]
              args:
                - |
                  cd /$VAULT_NAMESPACE
                  DATE=$(date +"%Y%m%d%H%M%S")
                  UNIQUE_NAME="$VAULT_NAMESPACE-$DATE-$(cat /proc/sys/kernel/random/uuid).snap"
                  echo "Starting Vault backup..."
                  if vault login -method=aws -path=backup header_value=$VAULT_NAMESPACE-backup-cronjob role=$BACKUP_ROLE; then
                      echo "Logged in successfully."
                  else
                      echo "Failed to log in to Vault."
                      exit 1
                  fi
                  echo "Saving snapshot..."
                  if vault operator raft snapshot save $UNIQUE_NAME; then
                      echo "Snapshot saved successfully."
                      touch /$VAULT_NAMESPACE/snapshot_ready  # Create snapshot ready file we check in aws cli container
                  else
                      echo "Failed to save snapshot."
                      exit 1
                  fi
              volumeMounts:
                - name: tls
                  mountPath: /vault/tls
                  readOnly: true
                - name: {{ .Values.name }}-vault
                  mountPath: /{{ .Values.name }}-vault
          containers:
            - name: backup-exporter
              image: amazon/aws-cli:latest
              env:
                - name: VAULT_ADDR
                  value: "https://{{ .Values.name }}-vault-active.{{ .Values.name }}-vault.svc.cluster.local:8200"
                - name: VAULT_CAPATH
                  value: "/vault/tls/ca.crt"
                - name: BACKUP_ROLE
                  value: "vault_backup"
                - name: VAULT_NAMESPACE
                  value: "{{ .Values.name }}-vault"
                - name: S3_DESTINATION
                  value: "{{ .Values.s3Bucket }}/{{ .Values.stackName }}/{{ .Values.name }}/"
              command: [ "/bin/sh", "-c" ]
              args:
                - |
                  cd /$VAULT_NAMESPACE
                  echo "Waiting for snapshot..."
                  retries=0
                  while [ ! -f /$VAULT_NAMESPACE/snapshot_ready ]; do
                      sleep 1
                      retries=$((retries+1))
                      if [ $retries -ge 180 ]; then  # Give up after 3 minutes (180 seconds)
                          echo "Failed to find snapshot after multiple attempts."
                          exit 1
                      fi
                  done
                  UNIQUE_NAME=$(find /$VAULT_NAMESPACE -maxdepth 1 -type f -name "$VAULT_NAMESPACE*" | head -n 1)
                  echo "Starting Vault backup..."
                  # Run aws command to upload backup
                  aws s3 cp $UNIQUE_NAME s3://$S3_DESTINATION
                  # Check if upload was successful
                  if [ $? -eq 0 ]; then
                      echo "Backup uploaded successfully."
                      # Remove the snapshot file after successful upload
                      rm -f $UNIQUE_NAME && echo "Snapshot file removed successfully."
                      # Remove the sentinel file
                      rm -f /$VAULT_NAMESPACE/snapshot_ready && echo "Snapshot ready indicator removed."
                  else
                      echo "Failed to upload backup to S3."
                      exit 1
                  fi
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "500m"
                limits:
                  memory: "8Gi"
                  cpu: "2000m"
              volumeMounts:
                - name: tls
                  mountPath: /vault/tls
                  readOnly: true
                - name: {{ .Values.name }}-vault
                  mountPath: /{{ .Values.name }}-vault
          restartPolicy: Never
